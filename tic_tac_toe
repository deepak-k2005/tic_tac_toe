<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tic-Tac-Toe</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background-color: #f5f5f5;
    }
    h1 {
      margin-bottom: 20px;
    }
    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-gap: 5px;
    }
    .cell {
      width: 100px;
      height: 100px;
      background-color: white;
      border: 2px solid #333;
      font-size: 2em;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    .cell:hover {
      background-color: #e0e0e0;
    }
    .status {
      margin: 20px;
      font-size: 1.2em;
    }
    button {
      padding: 10px 20px;
      font-size: 1em;
    }
  </style>
</head>
<body>

  <h1>Tic-Tac-Toe</h1>
  <div class="status" id="statusText">Player X's turn</div>
  <div class="board" id="gameBoard"></div>
  <button onclick="resetGame()">Restart Game</button>

  <script>
    const board = document.getElementById("gameBoard");
    const statusText = document.getElementById("statusText");
    let currentPlayer = "X";
    let gameState = Array(9).fill("");

    const winningCombos = [
      [0,1,2], [3,4,5], [6,7,8], // rows
      [0,3,6], [1,4,7], [2,5,8], // columns
      [0,4,8], [2,4,6]           // diagonals
    ];

    function createBoard() {
      board.innerHTML = "";
      gameState.forEach((cell, index) => {
        const cellDiv = document.createElement("div");
        cellDiv.classList.add("cell");
        cellDiv.dataset.index = index;
        cellDiv.textContent = cell;
        cellDiv.addEventListener("click", handleMove);
        board.appendChild(cellDiv);
      });
    }

    function handleMove(e) {
      const idx = e.target.dataset.index;
      if (gameState[idx] !== "") return;

      gameState[idx] = currentPlayer;
      e.target.textContent = currentPlayer;

      if (checkWinner()) {
        statusText.textContent = `ðŸŽ‰ Player ${currentPlayer} wins!`;
        disableBoard();
      } else if (gameState.every(cell => cell !== "")) {
        statusText.textContent = "ðŸ˜® It's a draw!";
      } else {
        currentPlayer = currentPlayer === "X" ? "O" : "X";
        statusText.textContent = `Player ${currentPlayer}'s turn`;
      }
    }

    function checkWinner() {
      return winningCombos.some(combo => {
        return combo.every(index => gameState[index] === currentPlayer);
      });
    }

    function disableBoard() {
      const cells = document.querySelectorAll(".cell");
      cells.forEach(cell => cell.removeEventListener("click", handleMove));
    }

    function resetGame() {
      gameState = Array(9).fill("");
      currentPlayer = "X";
      statusText.textContent = `Player ${currentPlayer}'s turn`;
      createBoard();
    }

    createBoard();
  </script>

</body>
</html>
